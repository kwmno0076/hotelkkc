<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- spring-jdbc 모듈이용 -->
		<!-- SimpleDriverDataSource클래스로 dataSource객체 생성 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<property name="username" value="night" />
		<property name="password" value="night" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- MyBatis-Spring 모듈이용 -->
		<!-- SqlSessionFactoryBean 이용 -->
		<!-- sqlSessionFactory 객체 생성 -->
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<!-- mybatis-config.xml 파일이 스프링이 동작할때 같이 동작할 수 있게끔해줌 -->
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
		<!-- 작성된 mappers폴더 내에 어떤 폴더이건 관계없이 파일의 이름이 Mapper.xml로 끝나면 자동으로 인식하게함 -->
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<!-- SqlSessionTemplate은 SqlSessionFactory를 생성자로 주입하여 설정함 -->
	</bean>
	<!-- mybatis-spring에서 제공하는 SqlSessionTemplate은 MyBatis의 SqlSession인터페이스를 
		구현한 클래스로 기본적인 트랜잭션의 관리나 쓰레드 처리의 안정성등을 보장해주고,데이터베이스의 연결과 종료를 책임짐 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:annotation-driven />
	<!--<tx:annotation-driven/>@Transactional애노테이션을 이용한 트랜잭션 관리 -->
	<context:component-scan base-package="com.hotelkkc.dao"></context:component-scan>
	<!-- @Repository 애노테이션이 설정되더라도 스프링에서 해당 패키지를 스캔하지 않으면 제대로 스프링의 빈으로 되지않음 -->
	<context:component-scan base-package="com.hotelkkc.service"></context:component-scan>
	<!--<context:component-scan base-package="com.todays.aop"></context:component-scan> -->

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 자동으로 AspectJ라이브러리를 이용해서 Proxy객체를 생성해 내는 용도 -->

</beans>